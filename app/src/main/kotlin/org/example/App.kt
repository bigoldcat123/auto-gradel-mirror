/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import lombok.Data
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.nio.channels.Channels
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import kotlin.io.path.Path
import kotlin.io.path.PathWalkOption
import kotlin.io.path.walk
import kotlin.reflect.typeOf

const val SETTING_FRE_CODE = "\"dependencyResolutionManagement {\\n\" +\n" +
        "            \"    repositories{\\n\" +\n" +
        "            \"        maven(\\\"https://mirrors.cloud.tencent.com/nexus/repository/maven-public/\\\")\\n\" +\n" +
        "            \"    }\\n\" +\n" +
        "            \"}\\n\" +\n" +
        "            \"pluginManagement {\\n\" +\n" +
        "            \"    repositories{\\n\" +\n" +
        "            \"        maven(\\\"https://maven.aliyun.com/repository/gradle-plugin\\\")\\n\" +\n" +
        "            \"    }\\n\" +\n" +
        "            \"}\\n\""

const val BUILD_GRADLE_KTS = "build.gradle.kts"
const val WRAPPER_PROPERTIES = "gradle-wrapper.properties"
const val SETTINGS_GRADLE_KTS = "settings.gradle.kts"
fun getCode(path:String):String {
    val ipt = FileInputStream(path)
    val readAllBytes = ipt.readAllBytes()
    val code = readAllBytes.toString(charset("UTF-8"))
    return code
}
fun writeTo(path: String,code:String) {
    FileOutputStream(path).write(code.toByteArray(charset("UTF-8")))
}
fun convertBuild(path: String) {
    val code = getCode(path)
    val result =  code.replace("mavenCentral()", "")
    writeTo(path,result)
}
fun convertWrapperProperties (path: String) {
    val code = getCode(path)
    val split = code.split("\n")
    val result = split.filter { !it.startsWith("distributionUrl") }.toList().plus("distributionUrl=https\\://mirrors.cloud.tencent.com/gradle/gradle-8.10.1-bin.zip")
    writeTo(path,result.joinToString("\n"))
}
fun convertSettings(path: String) {
    val code = getCode(path)
    val result = SETTING_FRE_CODE.plus(code)
    writeTo(path,result)
}
fun recursivePath(dir:String) {
    File(dir).listFiles()?.forEach {
        if(it.isDirectory && it.name.startsWith("."))return
        if(it.isFile){
            if(it.name.equals(BUILD_GRADLE_KTS)) {
                convertBuild(it.absolutePath)
            }
            if(it.name.equals(WRAPPER_PROPERTIES)) {
                convertWrapperProperties(it.absolutePath)
            }
            if(it.name.equals(SETTINGS_GRADLE_KTS)) {
                convertSettings(it.absolutePath)
            }

        }else {
            recursivePath(it.path)
        }
    }
}
fun main(args:Array<String>) {
    println()
    var dir = System.getProperty("user.dir")
    if(dir != null){
        recursivePath(dir)
        println("convert success")
    }
    else
        println("not support")
}

